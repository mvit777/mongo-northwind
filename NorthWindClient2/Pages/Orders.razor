@page "/orders"
@using Domain.Models;
@using MongoDB.Bson
@using Newtonsoft.Json;
@using System.Text;
@using Domain.Infrastructure.services;
@using AKSoftware.Blazor.Utilities;
@using NorthWindClient2.Shared;

@inject HttpClient Http;
@inject IJSRuntime JSRuntime;
@inject ConfigService ConfigService;


<h3>Orders</h3>
<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.BottomRight" />
<div class="float-end"><Button Color="ButtonColor.Primary" @onclick="() =>OnAddClicked()"> ADD NEW </Button></div>
<div style="clear:both"></div>
<br />
<div id="Grid">
    <Grid TItem="Domain.Models.Orders" @ref="OrdersGrid" class="table table-hover table-bordered table-striped" DataProvider="OrdersDataProvider" AllowFiltering="true" Responsive="true">
        <GridColumn TItem="Domain.Models.Orders" HeaderText="Order Id">
            @context.OrderID
        </GridColumn>
        <GridColumn TItem="Domain.Models.Orders" HeaderText="Customer">
            @context.CustomerID
        </GridColumn>
        <GridColumn TItem="Domain.Models.Orders" HeaderText="Order Date">
            @context.OrderDate
        </GridColumn>
        <GridColumn TItem="Domain.Models.Orders" HeaderText="Shipped Date">
            @context.ShippedDate
        </GridColumn>
        <GridColumn TItem="Domain.Models.Orders" HeaderText="Actions">
            <Button Color="ButtonColor.Primary" @onclick="() =>OnEditClicked(context._id)"> EDIT </Button>
            <Button Color="ButtonColor.Danger" @onclick="() =>OnDeleteClicked(context._id, context.OrderID.ToString())"> DELETE </Button>
        </GridColumn>
    </Grid>
</div>
<ConfirmDialog @ref="deleteDialog"
               Title="Are you sure you want to delete this?"
               Message1=@message
               Message2="Do you want to proceed?"
               OnYes="OnConfirmDeleteAsync"
               OnNo="OnCancelDeleteAsync">
</ConfirmDialog>
<Modal @ref="EditModal" Title="@editModalTitle" Fullscreen="ModalFullscreen.Always">
    <BodyTemplate>
        <Tabs>
            <Tab Title="Order" IsActive="true">
                <Content>
                    <EditForm EditContext="@OrderEditContext" class="row p-3">
                        <div class="col-md-6 mb-3">
                            <label for="OrderId">Order ID</label>
                            <InputNumber id="OrderId" @bind-Value="OrderItem.OrderID" class="form-control" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="Customer">Customer</label>
                            <InputText id="Customer" @bind-Value="OrderItem.CustomerID" class="form-control" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="OrderDate">Order Date</label>
                            <InputText id="OrderDate" @bind-Value="OrderItem.OrderDate" class="form-control" />

                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="ShippedDate">Shipped Date</label>
                            <InputText id="ShippedDate" @bind-Value="OrderItem.ShippedDate" class="form-control" />

                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="RequiredDate">Required Date</label>
                            <InputText id="RequiredDate" @bind-Value="OrderItem.RequiredDate" class="form-control" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="ShipVia">Ship Via</label><br />
                            @if (Shippers != null)
                            {
                                <InputSelect @bind-Value="OrderItem.ShipVia" class="form-control">
                                    @foreach (var shipper in Shippers)
                                    {
                                        <option value="@shipper.CompanyName">@shipper.CompanyName</option>
                                    }
                                </InputSelect>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="RequiredDate">Freight</label>
                            <InputNumber id="RequiredDate" @bind-Value="OrderItem.Freight" class="form-control" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="ShipName">ShipName</label>
                            <InputText id="ShipName" @bind-Value="OrderItem.ShipName" class="form-control" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="ShipAddress">Ship Address</label>
                            <InputText id="ShipAddress" @bind-Value="OrderItem.ShipAddress" class="form-control" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="ShipCity">Ship City</label>
                            <InputText id="ShipCity" @bind-Value="OrderItem.ShipCity" class="form-control" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="ShipRegion">Ship Region</label>
                            <InputText id="ShipRegion" @bind-Value="OrderItem.ShipRegion" class="form-control" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="ShipPostalCode">Ship Postal Code</label>
                            <InputNumber id="ShipPostalCode" @bind-Value="OrderItem.ShipPostalCode" class="form-control" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="ShipCountry">Ship Country</label>
                            <InputText id="ShipCountry" @bind-Value="OrderItem.ShipCountry" class="form-control" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="Status">Status</label>
                            <InputText id="Status" @bind-Value="OrderItem.Status" class="form-control" />
                        </div>
                        <div class="col-md-12 mb-3">
                            <div class="float-end">
                                <Button Color="ButtonColor.Primary" @onclick="()=>OnSaveClicked(OrderItem._id)">SAVE</Button>
                            </div>
                        </div>
                    </EditForm>
                </Content>
            </Tab>
            <Tab Title="Details">
                <Content>
                    <AdminOrderDetails @ref="TabOrderDetails" OrderId="@OrderItem.OrderID" DetailsEndPoint="@endpointDetails" />
                 </Content>
            </Tab>
        </Tabs>
    </BodyTemplate>
</Modal>
@code {
    private IEnumerable<Domain.Models.Orders>? ListOrders;
    private Grid<Domain.Models.Orders>? OrdersGrid;
    private string endpoint = "";
    private string endpointDetails = "";
    private Domain.Models.Orders OrderItem = new Domain.Models.Orders();
    private EditContext? OrderEditContext;
    private Modal? EditModal;
    private List<Shippers>? Shippers;
    private AdminOrderDetails? TabOrderDetails;
    private string ? deletableObjId;
    private ConfirmDialog ? deleteDialog;
    private string? message;
    List<ToastMessage> messages = new List<ToastMessage>();
    private string ? editModalTitle;


    /************************************data handlers***********************/
    private async Task OnConfirmDeleteAsync()
    {
        var url = endpoint + "/" + deletableObjId;
        await Http.DeleteAsync(url);
        messages?.Add(new ToastMessage
            {
                Type = ToastType.Success,
                Message = $"Item deleted. DateTime: {DateTime.Now}",
            });
        await GetOrders();
        await OrdersGrid.RefreshDataAsync();
        StateHasChanged();
    }
    private async Task OnCancelDeleteAsync()
    {
        messages?.Add(new ToastMessage
            {
                Type = ToastType.Secondary,
                Message = $"Action canceled. DateTime: {DateTime.Now}",
            });
    }

    private async Task OnDeleteClicked(string id, string orderId)
    {    
        message = $"Please confirm you want to delete item {orderId}";
        deleteDialog?.Show();
        deletableObjId = id;
    }
    private async void OnSaveClicked(string id){
        if(OrderEditContext.Validate()){
            OrderItem = (Domain.Models.Orders)OrderEditContext.Model;
            var url = endpoint;
            var data = JsonConvert.SerializeObject(OrderItem);
            HttpResponseMessage response = await Http.PostAsJsonAsync(url, data);
            if (response.IsSuccessStatusCode)
            {
                OrderItem = new Domain.Models.Orders();
                await EditModal.HideAsync();
                messages?.Add(new ToastMessage
                    {
                        Type = ToastType.Success,
                        Message = $"Item saved",
                    });
            }else{
                await EditModal.HideAsync();
                messages?.Add(new ToastMessage
                    {
                        Type = ToastType.Danger,
                        Message = $"An error occurred: {response.ReasonPhrase}",
                    });
            }
        }
    }
    private async void OnEditClicked(string id)
    {
        await GetOrder(id);
        editModalTitle = $"Editing Order {OrderItem.OrderID.ToString()}";
        await EditModal?.ShowAsync();
        TabOrderDetails.PopulateDetails(OrderItem.OrderID);
        StateHasChanged();

    }
    private async void OnAddClicked()
    {
        OrderItem = new Domain.Models.Orders();
        GetOrders();//must be not async, does not need to refresh the table as it is done later
        var prevLastOrder = ListOrders.Max(x => x.OrderID);
        OrderItem.OrderID = prevLastOrder + 1;
        var url = endpoint;
        var data = JsonConvert.SerializeObject(OrderItem);
        HttpResponseMessage response = await Http.PutAsJsonAsync(url, data);
        await GetOrders();
        await OrdersGrid.RefreshDataAsync();
    }
    private async Task<GridDataProviderResult<Domain.Models.Orders>> OrdersDataProvider(GridDataProviderRequest<Domain.Models.Orders> request)
    {
        await GetOrders();
        return await Task.FromResult(request.ApplyTo(ListOrders));
    }
    private async Task GetOrders(bool refresh = false){
        ListOrders = await Http.GetFromJsonAsync<List<Domain.Models.Orders>>(endpoint);
    }
    private async Task GetOrder(string id)
    {
        await Task.Run(() =>
        {
            OrderItem = ListOrders?.AsQueryable<Domain.Models.Orders>().Where(x => x._id == id).SingleOrDefault();
            OrderEditContext = new EditContext(OrderItem);
        });
    }
    private async Task GetShippersList()
    {
        var shippersUrl = ConfigService.GetBaseUrl() + ConfigService.GetUrl("shippers.endpoint");
        Shippers = await Http.GetFromJsonAsync<List<Shippers>>(shippersUrl);
    }
    /************************page events**********************************/
    protected override async Task OnInitializedAsync()
    {
        endpoint = ConfigService.GetBaseUrl() + ConfigService.GetUrl("orders.endpoint");
        endpointDetails = ConfigService.GetBaseUrl() + ConfigService.GetUrl("orderdetails.endpoint");
        OrderEditContext = new EditContext(OrderItem);
        await GetShippersList();
    }
    //protected async override Task OnAfterRenderAsync(bool firstRender){

    //}
}
